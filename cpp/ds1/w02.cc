#include <iostream>

using namespace std;

int main(int argc, char const *argv[]) {
    // 사용자 정의 타입은 개발자가 프로그램의 요구사항에 맞춰 데이터를
    // 구조화하고 의미를 부여할 수 있도록 설계된 도구. 대표적으로 enum(열거형)과
    // struct(구조체)가 있으며, 이들은 데이터의 표현과 조직화를 보다 직관적이고
    // 효율적으로 만든다.

    // 전통적인 enum은 이름 충돌과 암묵적 정수 변환으로 인해 타입 안전성이
    // 떨어졌으나, C++11부터 도입된 enum class는 이런 문제를 해결했음. enum
    // class는 범위가 지정된 열거형으로, 열거자(enum value)가 열거형 타입 외부로
    // 노출되지 않으며 명시적 캐스팅 없이는 다른 타입으로 변환되지 않음

    // 구조체는 서로 다른 타입의 데이터를 하나의 논리적 단위로 묶는데 사용됨,
    // C++에서 struct는 클래스와 기능적으로 동일하며, 기본 접근 지정자만
    // 다름(struct는 public, class는 private). 구조체 내부 변수는 메모리 정렬
    // 규칙에 따라 배치되며 성능 최적화에 영향을 미침. 현대 컴파일러는 이것을
    // 자동으로 처리하지만 개발자는 정렬을 고려한 설계를 할 수 있음

    // 상태를 나타내는 범위 지정 열거형 정의
    enum class 상태 { 대기중, 실행중, 완료 };

    // 열거형 변수 선언 및 초기화
    상태 current = 상태::대기중;

    // switch 문을 활용한 상태 처리
    switch (current) {
        case 상태::대기중:
            cout << "현재 상태: 대기중\n";
            break;
        case 상태::실행중:
            cout << "현재 상태: 실행중\n";
            break;
        case 상태::완료:
            cout << "현재 상태: 완료\n";
            break;
    }

    // 정수로의 암묵적 변환 불가능
    // int value = 상태::대기중; // 컴파일 오류 발생
}
